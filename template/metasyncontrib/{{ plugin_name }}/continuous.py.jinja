"""{{ plugin_name }} classes for continuous variables."""

import polars as pl

from metasyn.distribution.continuous import UniformDistribution
from metasyn.distribution.continuous import NormalDistribution, LogNormalDistribution
from metasyn.distribution.continuous import ExponentialDistribution
from metasyn.distribution.continuous import TruncatedNormalDistribution

{{ metadist_import_import }}


# {{ decorator }}
# class {{ prefix }}Uniform(UniformDistribution):
#     """Uniform distribution implementation with {{ plugin_name|lower }}."""
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}TruncatedNormal(Base{{ prefix }}, TruncatedNormalDistribution):
#     """TruncatedNormal distribution implementation with {{ plugin_name|lower }}."""
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}Normal(Base{{ prefix }}, NormalDistribution):
#     """Normal distribution implementation with {{ plugin_name|lower }}."""
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}LogNormal(Base{{ prefix }}, LogNormalDistribution):
#     """LogNormal distribution implementation with {{ plugin_name|lower }}."""
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}Exponential(Base{{ prefix }}, ExponentialDistribution):
#     """Exponential distribution implementation with {{ plugin_name|lower }}."""
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")
