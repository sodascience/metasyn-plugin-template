from metasyn.distribution.constant import ConstantDistribution, DiscreteConstantDistribution
from metasyn.distribution.constant import StringConstantDistribution, TimeConstantDistribution
from metasyn.distribution.constant import DateConstantDistribution, DateTimeConstantDistribution

{{ metadist_import }}


# {{ decorator }}
# class {{ prefix }}Constant(ConstantDistribution):
#     """{{ plugin_name }} implementation for continuous constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}DiscreteConstant(DiscreteConstantDistribution):
#     """{{ plugin_name }} implementation for discrete constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}StringConstant(StringConstantDistribution):
#     """{{ plugin_name }} implementation for String constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")


# {{ decorator }}
# class {{ prefix }}TimeConstant(TimeConstantDistribution):
#     """{{ plugin_name }} implementation for Time constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")

# {{ decorator }}
# class {{ prefix }}DateConstant(DateConstantDistribution):
#     """{{ plugin_name }} implementation for Date constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")

# {{ decorator }}
# class {{ prefix }}DateTimeConstant(DateTimeConstantDistribution):
#     """{{ plugin_name }} implementation for DateTime constant distribution.
#     """
#
#     @classmethod
#     def _fit(cls, values: pl.Series, extra_argument=default_value):
#         raise NotImplementedError("This distribution is not implemented yet.")
